* Amatica

We can also use this repository as a test for generating test for the amatica
setup.  We will use this both for an iso image, an for a bagit strategy

** Bagit

The amatica docs suggest that bagit files are a good why to create your
archives.  As a first pass we'll try that.  I am using [[https://github.com/little9/gladstone][gladstone]] to create these
bagit files.

#+BEGIN_SRC bash :results scalar
    bag='bagit-pets'
    gladstone --bagName ${bag} --originDirectory ex1-pets --cryptoMethod sha256 \
    --sourceOrganization "University of California, Davis Library - Special Collections" \
    --organizationAddress: '1 Shields Ave, Davis California 95616' \
    --contactName 'Special Collection' \
    --contactEmail 'library@ucdavis.edu' \
    --externalDescription 'Digital Management Collaborator Pets'
#+END_SRC

#+RESULTS:
: Creating bag directory: bagit-pets
: Creating data directory: /data
: Creating bag info file: bagit-pets/bag-info.txt
: Creating bag info file: bagit-pets/bagit.txt
: Creating manifest: bagit-pets/manifest-sha256.txt

Now we also want to add some  submission documentation

#+BEGIN_SRC bash
bag=bagit-pets
doc=${bag}/metadata/submissionDocumentation
# Amatica sez put in the metadata after the bag creation.
mkdir -p ${doc}
cp ex1-pets/thumbnail.png ${doc}

#+END_SRC

#+RESULTS:

** Creating metadata files

At a later date, we may be interested in creating metadata for more files than
just one, so the example below shows how we might do this based on our ttl
files. It's a bit painful the first time through, but otherwise works pretty well.

#+BEGIN_SRC bash :format raw
bag=bagit-pets
doc=${bag}/metadata/submissionDocumentation
sparql=~/apache-jena-3.9.0/bin/sparql

query="prefix : <http://schema.org/>
select ?filename ?dc_title ?dc_creator ?dc_date ?dc_publisher ?dc_subject ?dc_subject_2 ?dc_subject_3
WHERE {
 bind ('/objects' as ?filename) .
 ?c :name ?dc_title .
 ?c :creator ?dc_creator .
 ?c :keywords ?dc_subject .
 OPTIONAL { ?c :publisher ?dc_publisher . }
 OPTIONAL { ?c :datePublished ?dc_date}
 OPTIONAL { ?c :keywords ?dc_subject_2 . filter(?dc_subject != ?dc_subject_2) . }
 OPTIONAL { ?c :keywords ?dc_subject_3 .
            filter(?dc_subject != ?dc_subject_3) .
            filter(?dc_subject_2 != ?dc_subject_3)
  }
}
LIMIT 1"
${sparql} --data=ex1-pets.ttl --results=csv --query=- <<<$query |
 sed -e 's/dc_/dc./g' -e 's/_[0-9]//g' > ${bag}/metadata/metadata.csv
cat ${bag}/metadata/metadata.csv
#+END_SRC

#+RESULTS:
| filename | dc.title          | dc.creator | dc.date | dc.publisher | dc.subject | dc.subject | dc.subject |
| /objects | Collaborator Pets | Quinn Hart |    2018 |              | Cats       | Dogs       | Pets       |


** Creating the Metdata from the Amatica

Okay, running the above setup through amatica leads to some issues.  First, the
DIP package does not include any of the submissionDocumentation, so we need to
have the AIP in place in order to do any of the processing.  In addition to
that, I don't think we can be sure the metadata.csv file is in place, so I think
we will have to extract our metadata from the AIP file itself.  This is a pain.
However, in the end we really only need a few files.  For any archive, we need
the following files:

- The metadata file describing the AIP
- The AIP and the DIP files.  These will be stored in the associatedMedia
  location, and well might need to describe them somehow.
- Anything else like thumbnails, etc.

*** Archive format

When you create a bag, every file gets a UID appended to it.  So the original
data are not in the same location. So if

#+BEGIN_EXAMPLE bash
pid=d0d45ff0-7883-42eb-9454-e7cfa758d568
ar=bagit-pets
# The metadata file is located at:
${ar}-${pid}/data/METS.${pid}.xml

# The thumbnail is located at Don't know the ${tid}, but there is only one
${ar}-${pid}/data/objects/submissionDocumentation/transfer-${ar}-${tid}/thumbnail.png

#+END_EXAMPLE

**** Metadata format

Below is a metadata snippet, from the METS file.  This shows the dmdSec that we
are interested in.  According to Eric, it is always the one with the ~dmdSec_4~
tag.

#+BEGIN_EXAMPLE xml
<?xml version='1.0' encoding='UTF-8'?>
<mets:mets xmlns:mets="http://www.loc.gov/METS/" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.loc.gov/METS/ http://www.loc.gov/standards/mets/version111/mets.xsd">
  <mets:metsHdr CREATEDATE="2019-03-08T01:18:46"/>
  <mets:dmdSec ID="dmdSec_4">
    <mets:mdWrap MDTYPE="DC">
      <mets:xmlData>
        <dcterms:dublincore xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:dcterms="http://purl.org/dc/terms/" xsi:schemaLocation="http://purl.org/dc/terms/ http://dublincore.org/schemas/xmls/qdc/2008/02/11/dcterms.xsd">
          <dc:title>Collaborator Pets Metadata</dc:title>
          <dc:creator>Quinn Metadata Hart</dc:creator>
          <dc:subject>Metadata about Cats; Dogs</dc:subject>
          <dc:description>This is more metadata in description format</dc:description>
          <dc:publisher>UCDavis </dc:publisher>
          <dc:contributor>Quinn Hart</dc:contributor>
          <dc:date>2019-01-01</dc:date>
          <dc:type>Archival Information Package</dc:type>
          <dc:language>United States</dc:language>
        </dcterms:dublincore>
      </mets:xmlData>
    </mets:mdWrap>
  </mets:dmdSec>
#+END_EXAMPLE

In the end, this is the file that we are shooting for:

#+BEGIN_EXAMPLE ttl
@prefix schema: <http://schema.org/> .
@prefix rdf:  <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix ldp:  <http://www.w3.org/ns/ldp#> .
@prefix acl: <http://www.w3.org/ns/auth/acl#> .
@prefix fedora: <http://fedora.info/definitions/v4/webac#> .

<>
  a ldp:BasicContainer, schema:Dataset ;
  schema:name "Collaborator Pets Metadata" ;
  schema:creator "Quinn Metadata Hart" ;
  schema:publisher "UCDavis" ;
  schema:keywords "Metadata about Cats" "Dogs" ;
  schema:image <ex1-pets/thumbnail.png> ;
  schema:material "Archival Information Package" ;
  schema:datePublished "2019"^^<http://www.w3.org/2001/XMLSchema#gYear>  ;
  schema:description "This is more metadata in description format" .
  schema:dataset
#+END_EXAMPLE

We can get to this format by extracting this information from the XML file for
the archive.
